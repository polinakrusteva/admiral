/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 *
 * This product is licensed to you under the Apache License, Version 2.0 (the "License").
 * You may not use this product except in compliance with the License.
 *
 * This product may include a number of subcomponents with separate copyright notices
 * and license terms. Your use of these subcomponents is subject to the terms and
 * conditions of the subcomponent's license, as noted in the LICENSE file.
 */

package com.vmware.admiral.adapter.docker.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import com.vmware.xenon.common.LocalizableValidationException;

/**
 * Docker port mapping parsing utility
 */
public class DockerPortMapping {
    private static final String HOST_PORT = "HostPort";
    private static final String HOST_IP = "HostIp";

    public static enum Protocol {
        TCP,
        UDP;

        @Override
        public String toString() {
            return name().toLowerCase();
        }

        public static Protocol fromString(String protocolStr) {
            return valueOf(protocolStr.toUpperCase());
        }
    }

    private static final Pattern PORT_PATTERN = Pattern
            .compile("(?:(?:([^:]*):)?([^:]*):)?([\\d]+)(/(tcp|udp))?");

    private String hostIp;
    private String hostPort;
    private String containerPort;
    private Protocol protocol;

    /**
     * Parse a port string
     *
     * format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort |
     * containerPort
     *
     * @param portMappingStr
     * @return
     */
    public static DockerPortMapping fromString(String portMappingStr) {
        DockerPortMapping portMapping = new DockerPortMapping();
        Matcher matcher = PORT_PATTERN.matcher(portMappingStr);
        if (!matcher.matches()) {
            throw new LocalizableValidationException("Invalid format for port mapping: " + portMappingStr,
                    "adapter.docker.port.mapping.invalid", portMappingStr);
        }

        portMapping.hostIp = matcher.group(1);
        portMapping.hostPort = matcher.group(2);
        portMapping.containerPort = matcher.group(3);

        String protocolStr = matcher.group(5);
        if (protocolStr != null) {
            portMapping.protocol = Protocol.fromString(protocolStr);
        } else {
            portMapping.protocol = Protocol.TCP;
        }

        if ("".equals(portMapping.hostPort)) {
            portMapping.hostPort = null;
        }

        return portMapping;
    }

    /**
     * Format as a docker port mapping string (reverse of fromString)
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        if (hostIp != null && hostIp.trim().length() > 0) {
            sb.append(hostIp.trim());
            sb.append(":");
        }

        if (hostPort != null && hostPort.trim().length() > 0) {
            sb.append(hostPort.trim());
        }

        if (sb.length() > 0) {
            sb.append(":");
        }

        sb.append(containerPort.trim());
        sb.append("/");
        sb.append(protocol.toString());
        return sb.toString();
    }

    /**
     * Convert the port mapping to the format expected by the API
     *
     * <pre>
     * "8282/tcp": [
     *          {
     *              "HostIp": "0.0.0.0",
     *              "HostPort": "8282"
     *          }
     *      ]
     * </pre>
     *
     * @return
     */
    public Map<String, List<Map<String, String>>> toMap() {
        Map<String, String> portDetails = new HashMap<>();
        if (hostIp != null) {
            portDetails.put(HOST_IP, hostIp);
        }

        if (hostPort != null) {
            portDetails.put(HOST_PORT, hostPort);
        }

        List<Map<String, String>> list = new ArrayList<>(1);
        list.add(portDetails);

        Map<String, List<Map<String, String>>> portMap = new HashMap<>();
        portMap.put(getContainerPortAndProtocol(), list);

        return portMap;
    }

    /**
     * Convert a map generated by the toMap() method back to a DockerPortMapping
     *
     * @param map
     * @return
     */
    public static List<DockerPortMapping> fromMap(Map<String, List<Map<String, String>>> map) {
        return map.entrySet().stream()
                .map((e) -> fromMap(e))
                .filter((m) -> m != null)
                .collect(Collectors.toList());
    }

    /**
     * Convert a map generated by the toMap() method back to a DockerPortMapping
     *
     * @param entry
     * @return
     */
    public static DockerPortMapping fromMap(Map.Entry<String, List<Map<String, String>>> entry) {
        DockerPortMapping portMapping = new DockerPortMapping();

        if (entry.getValue() == null) {
            // no host mapping
            return null;
        }

        portMapping.containerPort = entry.getKey();
        int protocolSeparatorIndex = portMapping.containerPort.indexOf("/");
        if (protocolSeparatorIndex != -1) {
            portMapping.protocol = Protocol.fromString(portMapping.containerPort
                    .substring(protocolSeparatorIndex + 1));
            portMapping.containerPort = portMapping.containerPort.substring(0,
                    protocolSeparatorIndex);
        }

        Map<String, String> hostMap = entry.getValue().get(0);
        portMapping.hostIp = hostMap.get(HOST_IP);
        portMapping.hostPort = hostMap.get(HOST_PORT);

        return portMapping;
    }

    /**
     * Create a copy of this mapping with the given host port
     *
     * @param hostPort
     * @return
     */
    public DockerPortMapping withHostPort(int hostPort) {
        DockerPortMapping newMapping = new DockerPortMapping();

        newMapping.protocol = protocol;
        newMapping.containerPort = containerPort;
        newMapping.hostIp = hostIp;
        newMapping.hostPort = String.valueOf(hostPort);

        return newMapping;
    }

    /**
     * @return the hostIp
     */
    public String getHostIp() {
        return hostIp;
    }

    /**
     * @return the hostPort
     */
    public String getHostPort() {
        return hostPort;
    }

    /**
     * @return the containerPort
     */
    public String getContainerPort() {
        return containerPort;
    }

    /**
     * @return the protocol
     */
    public Protocol getProtocol() {
        return protocol;
    }

    public String getContainerPortAndProtocol() {
        return String.format("%s/%s", containerPort, protocol.toString());
    }
}
