{
  "app": {
    "homepage": {
      "welcome": "Welcome!",
      "description": "This is the place for you to <b>create, provision, manage and monitor containerized applications.</b>",
      "start": "Let's get started now!",
      "addHost": "Add a Host",
      "enter": "Enter",
      "helpCenter": "Help",
      "steps": {
        "description": "Creating an application is as simple as 1-2-3",
        "addHost": "Add a Host",
        "findImage": "Find an Image",
        "designApplication": "Design an Application"
      }
    },
    "navbar": {
      "hosts": "Hosts",
      "placements": "Placements",
      "templates": "Templates",
      "resources": "Resources",
      "containers": "Containers",
      "applications": "Applications",
      "networks": "Networks",
      "volumes": "Volumes",
      "closures": "Closures",
      "eventlog": "Event Log",
      "placementZones": "Placement Zones",
      "environments": "Environments",
      "endpoints": "Endpoints",
      "machines": "Machines",
      "compute": "Compute"
    },
    "host": {
      "entity": "host",
      "details": {
        "title": {
          "add": "Add Host",
          "create": "Create Host",
          "edit": "Edit Host"
        },
        "address": "Address",
        "addressPlaceholder": "Example: https://hostname:2376",
        "addressHint": "Please specify the appropriate scheme and port, e.g. https://myhost.com:2376. Default scheme: 'https'. Default ports: https/443, http/80.",
        "hostAlias": "Name",
        "hostAddress": "Address",
        "placementZone": "Placement zone",
        "credential": "Login credential",
        "guestCredential": "Guest credential",
        "destination": "Destination",
        "destinationPlaceholder": "Search for destination",
        "deploymentPolicy": "Deployment policy",
        "tags": "Tags",
        "tagsPlaceholder": "Example: location:west",
        "tagsHint": "Enter key:value tags",
        "autoConfigure": "Auto configure",
        "autoConfigureInput":"Enable host auto configuration",
        "autoConfigureHint": "This option will configure the docker remote API on the provided address and port with generated self signed certificates. It will be done once, over SSH. Supported operating systems are: CoreOS, PhotonOS, Ubuntu Server 16.04 or greater.",
        "reservationPolicy": "Reservation policy",
        "endpoint": "Endpoint",
        "connectionType": "Connection type",
        "connectionTypeShort": "Connection",
        "customProperties": "Custom properties",
        "verify": "Verify",
        "verified": "Verified successfully!",
        "add": "Add",
        "update": "Update",
        "create": "Create",
        "certificateWarning": "The certificate for __address__ is invalid. You may be connecting to a website that is pretending to be __address__, which could put your confidential information at risk. Would you like to connect to the website anyway?",
        "showCertificate": "Show certificate",
        "hideCertificate": "Hide certificate",
        "manageCertificates": "Manage Certificates",
        "containers": "Containers",
        "cpu": "CPU",
        "memory": "Memory",
        "storage": "Storage",
        "providerType": "Cloud type",
        "regionId": "Region ID",
        "name": "Name",
        "namePlaceholder": "Example: host-name",
        "memoryMbPlaceholder": "Memory in MB: 1024, 2048...",
        "instanceType": "Instance type",
        "imageType": "OS",
        "port": "Port",
        "clusterSize": "Instance count"
      },
      "list": {
        "title": "Hosts",
        "titleSearch": "Found Hosts",
        "searchPlaceholder": "Search for hosts",
        "dataCollect": "Data collect",
        "dataCollectStart": "Triggering data collection. It might take a few minutes to complete.",
        "dataCollectEnd": "Data collection has finished."
      },
      "actions": {
        "start": "Start",
        "stop": "Stop",
        "edit": "Edit",
        "enable": "Enable",
        "disable": "Disable",
        "remove": "Remove"
      }
    },
    "placementZone": {
      "createNew": "New Placement Zone",
      "manage": "Manage Placement Zones",
      "entity": "placement zone",
      "list": {
        "title": "Placement Zones",
        "addButton": "Add",
        "nameColumn": "Name",
        "cpuColumn": "CPU",
        "memoryColumn": "Memory",
        "storageColumn": "Storage",
        "hostsColumn": "Hosts"
      },
      "edit": {
        "createNew": "New Placement Zone",
        "update": "Edit Placement Zone",
        "nameTitle": "Placement zone name",
        "endpointTitle": "Endpoint",
        "placementPolicy": "Advanced Placement Policy",
        "placementPolicyHint": "By default resources are placed on random hosts. One of the following strategies can be optionally applied:<br><br><b>BINPACK</b> - place on host with highest memory usage.<br><br><b>SPREAD</b> - place on host with smallest number of resources.",
        "dynamicTitle": "Dynamically allocate resources to this zone",
        "tagsToMatchTitle": "Tags to match",
        "tagsToMatchHint": "Enter key:value tags to match",
        "tagsToMatchPlaceholder": "Example: location:west"
      },
      "contextPanelTooltip": "Placement Zones"
    },
    "businessGroup": {
      "entity": "business group"
    },
    "group": {
      "createNew": "New Project",
      "manage": "Manage Projects",
      "entity": "project",
      "contextPanelTooltip": "Projects",
      "list": {
        "title": "Project",
        "addButton": "Add",
        "nameColumn": "Name",
        "details": {
          "title": "Project details"
        }
      },
      "edit": {
        "createNew": "New Project",
        "update": "Edit Project",
        "nameTitle": "Project name"
      }
    },
    "credential": {
      "createNew": "New Credential",
      "manage": "Manage Credentials",
      "entity": "credential",
      "contextPanelTooltip": "Credentials",
      "list": {
        "title": "Credentials",
        "addButton": "Add",
        "nameColumn": "Name",
        "typeColumn": "Type",
        "credentialsColumn": "Credentials"
      },
      "edit": {
        "createNew": "New Credential",
        "update": "Edit Credential",
        "nameTitle": "Name",
        "usernamePasswordTitle": "Username",
        "usernameTitle": "Username",
        "passwordTitle": "Password",
        "showPassword": "Show password",
        "hidePassword": "Hide password",
        "usePrivateKey": "Use private key",
        "usePassword": "Use password",
        "certificateTitle": "Certificate",
        "publicTitle": "Public key",
        "publicCertificateTitle": "Public certificate",
        "privateCertificateTitle": "Private certificate"
      }
    },
    "deploymentPolicy": {
      "createNew": "New Deployment Policy",
      "entity": "deployment policy",
      "manage": "Manage Deployment Policies",
      "contextPanelTooltip": "Depl. Policies",
      "list": {
        "title": "Deployment Policies",
        "addButton": "Add",
        "nameColumn": "Name",
        "descriptionColumn": "Description",
        "details": {
          "title": "Deployment policy details"
        }
      },
      "edit": {
        "createNew": "New Deployment Policy",
        "update": "Edit Deployment Policy",
        "nameTitle": "Deployment policy name",
        "descriptionTitle": "Deployment policy description"
      }
    },
    "certificate": {
      "createNew": "New Certificate",
      "manage": "Manage Certificates",
      "entity": "certificate",
      "contextPanelTooltip": "Certificates",
      "list": {
        "title": "Certificates",
        "addButton": "Add",
        "nameColumn": "Name",
        "serialColumn": "Serial",
        "shaColumn": "SHA",
        "expirationColumn": "Expiration",
        "details": {
          "title": "Certificate details",
          "commonName": "Company name",
          "issuerName": "Issuer name",
          "serial": "Serial",
          "fingerprint": "SHA fingerprint",
          "validSince": "Valid since",
          "validTo": "Valid to"
        }
      },
      "edit": {
        "createNew": "New Certificate",
        "update": "Edit Certficate",
        "urlTitle": "Enter URL",
        "importOptionTitle": "Import from URL",
        "importOptionHint": "Instead of entering the certificate manually, \"Import from URL\" will let you enter a URL. Our system will then import the certificate from the URL you enetered.",
        "importButton": "Import",
        "certificateTitle": "Enter certificate"
      }
    },
    "template": {
      "list": {
        "title": "Popular Templates",
        "titleSearch": "Found Templates",
        "searchImagesTemplatesPlaceholder": "Search for images, templates",
        "searchImagesPlaceholder": "Search for images",
        "searchTemplatesPlaceholder": "Search for templates",
        "searchClosuresPlaceholder": "Search for closures",
        "manageRegistry": "Manage Registries",
        "provision": "Provision",
        "provisionAdditionalInfo": "Enter additional info",
        "editTemplate": "Edit / View Details",
        "official": "Official",
        "trusted": "Trusted",
        "stars": "Stars",
        "linksLabel": "Links",
        "addLinkLabel": "Add a link",
        "containers": "Select a container to depend on",
        "alias": "Enter Alias",
        "true": "Yes",
        "false": "No",
        "searchCategoryFilterTitle": "View:",
        "partialResultWarning": "You are seeing incomplete search results due to one or more query failures.",
        "searchCategory": {
          "all": "All",
          "images": "Images",
          "templates": "Templates",
          "closures": "Closures"
        }
      },
      "details": {
        "create": "Create Template",
        "createNameHint": "Template Name",
        "createProceed": "Proceed",
        "edit": "Edit Template",
        "newDefinition": {
          "newLabel": "Add Container",
          "title": "Add Container Definition",
          "selectImage": "Select an Image",
          "imageListTitle": "Popular Images",
          "imageListTitleSearch": "Found Images",
          "containerDefinitionInfo": "Container Definition Info"
        },
        "editDefinition": {
          "title": "Edit Container Definition"
        },
        "editNetwork" :{
          "newLabel": "Add Network",
          "newTitle": "Add Network Configuration",
          "newDropdownTitle": "Add Network...",
          "editTitle": "Edit Network Configuration",
          "name": "Name",
          "existingNetwork": "Existing",
          "showingCount": "Showing __count__ out of __totalCount__",
          "showingInstances": "instances",
          "noResults": "No networks found",
          "hosts": "Hosts",
          "hostsSearchPlaceholder": "Search for host",
          "create": "Create",
          "createTitle": "Create Network",
          "ipamConfig": "IPAM config",
          "ipamConfigSubnet": "Subnet",
          "ipamConfigSubnetHint": "Example: 172.16.238.0/24",
          "ipamConfigIPRange": "IP range",
          "ipamConfigIPRangeHint": "Example: 172.28.5.0/24",
          "ipamConfigGateway": "Gateway",
          "ipamConfigGatewayHint": "Example: 172.16.238.1",
          "customProperties": "Custom properties"
        },
        "editClosures" :{
          "newTitle": "Add Closure",
          "editTitle": "Edit Closure",
          "name": "Name"
        },
        "editVolume" :{
          "newLabel": "Add Volume",
          "newTitle": "Add Volume",
          "newDropdownTitle": "Add Volume...",
          "editTitle": "Edit Volume",
          "name": "Name",
          "driver": "Driver",
          "driverPlaceholder": "local",
          "driverOptions": {
            "label": "Driver Options",
            "keyTitle": "Option",
            "keyHint": "Example: size",
            "valueTitle": "Value",
            "valueHint": "Example: 20GB"
          },
          "existingVolume": "Existing",
          "showingCount": "Showing __count__ out of __totalCount__",
          "showingInstances": "instances",
          "noResults": "No volumes found",
          "mountpoint": "Host Mountpoint",
          "hosts": "Host",
          "hostsSearchPlaceholder": "Search for host",
          "create": "Create",
          "createTitle": "Create Volume",
          "customProperties": "Custom properties"
        },
        "network": {
          "drag": "Drag to attach container to this network",
          "drop": "Drop to attach container to this network"
        }
      },
      "actions": {
        "edit": "Edit",
        "provision": "Provision",
        "publish": "Push",
        "export": "Export",
        "import": "Import",
        "remove": "Remove"
      },
      "publish": {
        "tooltip": "Push to Blueprint",
        "success": "Pushed successfully",
        "fail": "Error pushing template to Blueprint"
      },
      "import": {
        "title": "Import Template",
        "loadButton": "Load from File",
        "importTemplateTooltip": "Import template or Docker Compose",
        "importTemplateHint": "Import a template or a Docker Compose file or manually enter its content.",
        "contentPlaceholder": "Enter template or Docker Compose...",
        "importButton": "Import"
      },
      "export": {
        "formatPromptMessage": "Select the format to which to export the template:",
        "format": {
          "compositeBlueprint": "YAML Blueprint",
          "dockerCompose": "Docker Compose"
        }
      }
    },
    "placement": {
      "list": {
        "title": "Placements",
        "addButton": "Add",
        "nameColumn": "Name",
        "groupColumn": "Project",
        "businessGroupColumn": "Business Group",
        "placementZoneColumn": "Placement Zone",
        "deploymentPolicyColumn": "Deployment Policy",
        "priorityColumn": "Priority",
        "instancesColumn": "Instances",
        "cpuColumn": "CPU shares",
        "memoryColumn": "Memory limit",
        "storageColumn": "Storage limit",
        "instancesPerPlacement": "Show instances per placement",
        "unlimitedInstances": "Unlimited"
      },
      "edit": {
        "createNew": "New Placement",
        "update": "Edit Placement",
        "nameLabel": "Name",
        "groupLabel": "Project",
        "selectGroup": "Select Project",
        "businessGroupLabel": "Business Group",
        "selectBusinessGroup": "Select Business Group",
        "placementZoneLabel": "Placement Zone",
        "selectPlacementZone": "Select Placement Zone",
        "deploymentPolicyLabel": "Deployment Policy",
        "selectDeploymentPolicy": "Select Deployment Policy",
        "priorityLabel": "Priority",
        "priorityPlaceholder": "Positive number (optional)",
        "priorityHint": "Leave it blank to make it lowest priority",
        "instancesLabel": "Instances",
        "instancesPlaceholder": "Number of instances (optional)",
        "instancesHint": "Positive integer to limit the maximum number of instances. Leave empty or 0 for unlimited number.",
        "cpuSharesLabel": "CPU shares",
        "memoryLimitLabel": "Memory limit",
        "storageLimitLabel": "Storage limit"
      }
    },
    "eventlog": {
      "title": "Events",
      "tabs": {
        "all": "All",
        "warnings": "Warnings",
        "errors": "Errors"
      },
      "contextPanelTooltip": "Event Log"
    },
    "registry": {
      "list": {
        "title": "Existing Registries",
        "addButton": "Add",
        "addressColumn": "Address",
        "nameColumn": "Name",
        "statusColumn": "Status"
      },
      "edit": {
        "createNew": "New Registry",
        "update": "Edit Registry",
        "addressTitle": "Address",
        "addressHint": "Please specify the appropriate scheme and port, e.g. https://myregistry.com:5000. Default scheme: 'https'. Default ports: https/443, http/80.",
        "insecureRegistryHint": "Plain http registry detected: make sure your hosts are properly configured and can connect to them. <a target=\"_blank\" href=\"https://docs.docker.com/registry/insecure/#/deploying-a-plain-http-registry\">More info</a>",
        "nameTitle": "Name",
        "credentialTitle": "Login credential",
        "verifyButton": "Verify",
        "verified": "Verified successfully!"
      }
    },
    "environment": {
      "list": {
        "title": "Environments",
        "titleSearch": "Found environments",
        "searchPlaceholder": "Search for environments",
        "addButton": "Create Environment",
        "addPropertyButton": "Add Property",
        "nameColumn": "Name",
        "endpointTypeColumn": "Endpoint Type",
        "propertiesColumn": "Properties",
        "mappingsColumn": "Mappings"
      },
      "details": {
        "endpoint": "Endpoint"
      },
      "actions": {
        "edit": "Edit",
        "remove": "Remove"
      },
      "edit": {
        "addTitle": "Add Environment",
        "editTitle": "Edit Environment",
        "save": "Save",
        "basicTab": "Basic",
        "computeTab": "Compute",
        "networkTab": "Network",
        "storageTab": "Storage",
        "nameLabel": "Name",
        "tagsLabel": "Tags",
        "endpointLabel": "Endpoint",
        "valueLabel": "Value",
        "instanceTypeLabel": "Instance type",
        "imageTypeLabel": "Image type",
        "bootDiskPropertyLabel": "Boot Disk Property",
        "cpuCountLabel": "CPUs",
        "diskSizeMbLabel": "Disk size",
        "memoryMbLabel": "Memory"
      },
      "instanceType": {
        "aws": {
          "small": "Small (1 CPU, 1 GB Memory)",
          "medium": "Medium (1 CPU, 2 GB Memory)",
          "large": "Large (2 CPUs, 8 GB Memory)",
          "xlarge": "X-Large (4 CPU, 16 GB Memory)"
        },
        "azure": {
          "small": "Small (1 CPU, 0.75 GB Memory)",
          "medium": "Medium (1 CPU, 1.75 GB Memory)",
          "large": "Large (2 CPU, 3.50 GB Memory)",
          "xlarge": "X-Large (4 CPU, 14 GB Memory)"
        },
        "vsphere": {
          "small": "Small (1 CPU, 1 GB Memory)",
          "medium": "Medium (1 CPU, 2 GB Memory)",
          "large": "Large (2 CPU, 8 GB Memory)",
          "xlarge": "X-Large (4 CPU, 16 GB Memory)"
        },
        "nimbus": {
          "small": "Small (1 CPU, 1 GB Memory)"
        }
      },
      "imageType": {
        "coreos": "CoreOS",
        "photon": "Photon OS",
        "ubuntu-1604": "Ubuntu"
      }
    },
    "endpoint": {
      "list": {
        "title": "Endpoints",
        "addButton": "Add",
        "nameColumn": "Name",
        "typeColumn": "Type"
      },
      "edit": {
        "addNew": "New Endpoint",
        "update": "Edit Endpoint",
        "nameLabel": "Name",
        "typeLabel": "Type",
        "providerTypeLabel": "Provider type",
        "privateKeyIdLabel": "Access key ID",
        "privateKeyLabel": "Secret access key",
        "regionIdLabel": "Region ID",
        "azure": {
          "userLinkLabel": "Subscription ID",
          "tenantIdLabel": "Tenant ID"
        },
        "vsphere": {
          "hostNameLabel": "Host name or IP",
          "privateKeyIdLabel": "Username",
          "privateKeyLabel": "Password",
          "regionIdLabel": "Datacenter"
        },
        "vro":{
          "hostNameLabel": "vRO instance IP",
          "privateKeyIdLabel": "Username",
          "privateKeyLabel": "Password",
          "providerHostNameLabel": "Host name or IP",
          "providerPrivateKeyIdLabel": "Provider username",
          "providerPrivateKeyLabel": "Provider password"
        }
      },
      "entity": "endpoint",
      "typeEntity": "type",
      "providerTypeEntity": "Provider Type",
      "datacenterEntity": "datacenter",
      "createNew": "New Endpoint",
      "manage": "Manage Endpoints",
      "contextPanelTooltip": "Endpoints"
    },
    "machine": {
      "list": {
        "title": "Machines",
        "titleSearch": "Found Machines",
        "searchPlaceholder": "Search for machines",
        "addButton": "Create Machine"
      },
      "edit": {
        "addTitle": "Create Machine",
        "editTitle": "Edit Machine",
        "nameLabel": "Name",
        "save": "Save",
        "create": "Create",
        "loadButton": "Load from file",
        "importTemplateHint": "Composite description containing one or multiple machine descriptions",
        "importPlaceholder": ""
      }
    },
    "compute": {
      "entity": "destination",
      "list": {
        "title": "Compute",
        "titleSearch": "Found Compute",
        "searchPlaceholder": "Search for compute"
      },
      "details": {
        "type": "Type"
      },
      "edit": {
        "title": "Edit Compute",
        "nameLabel": "Name"
      }
    },
    "resource": {
      "list": {
        "network": {
          "name": "Network",
          "connectedDateLabel": "Connected",
          "networkDriverLabel": "Network Driver",
          "ipamDriverLabel": "IPAM Driver",
          "subnetLabel": "Subnet",
          "gatewayLabel": "Gateway",
          "ipRangeLabel": "IP Range",
          "connectedContainers": "Containers",
          "parentHosts": "Hosts",
          "external": "External",
          "create": "Create Network",
          "state": {
            "UNKNOWN": "UNKNOWN",
            "PROVISIONING": "PROVISIONING",
            "CONNECTED": "CONNECTED",
            "RETIRED": "RETIRED",
            "ERROR": "ERROR"
          }
        },
        "container": {
          "create": "Create Container"
        },
        "application": {
          "create": "Create Application"
        },
        "closure": {
          "create": "Create Closure"
        },
        "volume": {
          "create": "Create Volume",
          "connectedDateLabel": "Connected since",
          "driverLabel": "Driver",
          "driverOptionsLabel": "Driver Options",
          "scope": "Scope",
          "mountpoint": "Host Mountpoint",
          "connectedContainers": "Containers",
          "parentHosts": "Hosts",
          "external": "External",
          "state": {
            "UNKNOWN": "UNKNOWN",
            "PROVISIONING": "PROVISIONING",
            "CONNECTED": "CONNECTED",
            "RETIRED": "RETIRED",
            "ERROR": "ERROR"
          }
        },
        "titleSearch": {
          "containers": "Containers",
          "applications": "Applications",
          "networks": "Networks",
          "volumes": "Volumes",
          "closures": "Closures"
        },
        "searchPlaceholder": {
          "containers": "Search for containers",
          "applications": "Search for applications",
          "networks": "Search for networks",
          "closures": "Search for closures"
        },
        "searchCategory": {
          "networks": "Networks"
        },
        "relations": {
          "hosts": "Hosts",
          "containers": "Containers",
          "applications": "Applications",
          "networks": "Networks",
          "volumes": "Volumes"
        }
      }
    },
    "container": {
      "list": {
        "title": "Items",
        "titleSearchContainers": "Found Containers",
        "titleSearchApplications": "Found Applications",
        "searchPlaceholder": "Search for containers",
        "createContainer": "Create Container",
        "hostLabel": "Host",
        "createdDateLabel": "Created",
        "portsLabel": "Ports",
        "commandLabel": "Command",
        "logLabel": "Log",
        "cluster": {
          "name": "Cluster",
          "sizeLabel": "Cluster size",
          "scaleLabel": "Scale"
        },
        "composite": {
          "name": "Application",
          "servicesCountLabel": "Services",
          "containersCountLabel": "Containers",
          "networksCountLabel": "Networks",
          "volumesCountLabel": "Volumes",
          "childContainersLabel": "Child containers"
        },
        "searchCategoryFilterTitle": "View:",
        "searchCategory": {
          "all": "All",
          "containers": "Containers",
          "applications": "Applications"
        }
      },
      "details": {
        "usages": "Usages",
        "properties": "Properties",
        "webview": "Web View",
        "logs": "Logs",
        "cpu": "CPU",
        "memory": "Memory",
        "network": "Network",
        "networkTrafficSent": "Sent",
        "networkTrafficReceived": "Received",
        "showingLogsSince": "Showing logs since",
        "logsFormat": "Logs format",
        "logsFormatAnsi": "ANSI",
        "logsFormatRaw": "Raw",
        "networkAddresses": "Network Addresses",
        "attributes": {
          "host": "Host",
          "createdDateLabel": "Created",
          "ports": "Ports",
          "command": "Command",
          "ipaddress": "Address",
          "image": "Image",
          "id": "id",
          "restartCount": "Restart Count",
          "memory": "Memory",
          "memorySwap": "Memory Swap",
          "cpuShares": "Cpu Shares",
          "cpusetCpus": "Cpu setCpus"
        },
        "operation": {
          "pending": "Operation in progress",
          "failure": "Operation failed"
        }
      },
      "request": {
        "title": "Provision a Container",
        "provision": "Provision",
        "saveTemplate": "Save as Template",
        "tabs": {
          "basic": "Basic",
          "network": "Network",
          "storage": "Storage",
          "policy": "Policy",
          "environment": "Environment",
          "health": "Health Config",
          "logconfig": "Log Config"
        },
        "inputs": {
          "image": "Image",
          "imageTag": {
            "searchHint": "Search for tags",
            "loadingHint": "Loading tags..."
          },
          "name": "Name",
          "group": "Project",
          "commands": "Command",
          "commandsDescription": "Command array to execute on container start",
          "commandsInputs": {
            "command": "Command",
            "commandHint": "Example: /startup.sh"
          },
          "deploymentPolicy": "Deployment Policy",
          "links": "Links",
          "linksDescription": "A list of services (in a template) the container depends on",
          "linksInputs": {
            "alias": "Alias",
            "aliasHint": "Example: db",
            "service": "Service"
          },
          "portBindings": "Port Bindings",
          "portBindingsDescription": "A map of exposed container ports and the host port they should map to",
          "portBindingsInputs": {
            "hostPort": "Host Port",
            "hostPortHint": "Example: 9080",
            "containerPort": "Container Port",
            "containerPortHint": "Example: 80"
          },
          "publishAll": "Publish All Ports",
          "publishAllDescription": "Publish all ports exposed by the image.",
          "hostname": "Hostname",
          "hostnameDescription": "The hostname to use for the container",
          "networkMode": "Network Mode",
          "networkModeDescription": "Sets the networking mode for the container.",
          "networkModeTypes": {
            "none": "None",
            "bridge": "Bridge",
            "host": "Host"
          },
          "networks": "Networks",
          "networksDescription": "Connects the container to these networks (in addition to the network mode).",
          "networksInputs": {
            "name": "Name",
            "nameHint": "Example: mynet",
            "aliases": "Aliases",
            "aliasesHint": "Example: my-service, my-other-service",
            "ipv4": "IPv4",
            "ipv4Hint": "Example: 172.16.1.8",
            "ipv6": "IPv6",
            "ipv6Hint": "Example: fe80::42:31ff:fecf:83e2"
          },
          "volumes": "Volumes",
          "volumesDescription": "Mount point paths inside the container. The container field is mandatory and must be an absolute path. The host field must be a volume name or an absolute path.",
          "volumesInputs": {
            "host": "Host",
            "hostHint": "Example: /host/project/path",
            "container": "Container",
            "containerHint": "Example: /container/project/path",
            "readOnly": "Read Only"
          },
          "volumesFrom": "Volumes From",
          "volumesFromDescription": "A list of volumes to inherit from another container.",
          "volumesFromInputs": {
            "volume": "Volume",
            "volumeHint": "Example: datacontainer"
          },
          "volumeDriver": "Volume Driver",
          "volumeDriverPlaceholder": "Example: local",
          "volumeDriverDescription": "The driver to be used for volumes",
          "volumeName": "Volume Name",
          "volumeNamePlaceholder": "Example: volumeName",
          "volumeNameDescription": "The name of the volume when using driver that is not local",
          "workingDirectory": "Working Directory",
          "workingDirectoryDescription": "The working directory for commands to run in",
          "clusterSize": "Cluster Size",
          "clusterSizeDescription": "The number of nodes to be provisioned",
          "restartPolicy": "Restart Policy",
          "restartPolicyDescription": "The behavior to apply when the container exits. The value \"always\" to always restart or \"on-failure\" to restart only when the container exit code is non-zero. If on-failure is used, max restart count controls the number of times to retry before giving up. The default is not to restart",
          "restartPolicyType": {
            "always": "Always",
            "onFailure": "On-failure",
            "none": "None"
          },
          "maxRestarts": "Max Restarts",
          "maxRestartsDescription": "Max restart count on container failures",
          "cpuShares": "CPU shares",
          "cpuSharesDescription": "An integer value containing the container CPU Shares (ie. the relative weight vs other containers)",
          "memoryLimit": "Memory Limit",
          "memoryLimitDescription": "Memory limit in bytes",
          "memorySwapLimit": "Memory Swap Limit",
          "memorySwapLimitDescription": "Total memory limit (memory + swap); set -1 to disable swap You must use this with memory and make the swap value larger than memory",
          "affinityConstraints": "Affinity Constraints",
          "affinityConstraintsDescription": "Affinity or anti-affinity conditions of containers deployed or not deployed on the same host. Format: [!]serviceName[:soft|hard].",
          "affinityInputs": {
            "antiaffinity": "Anti-affinity",
            "servicename": "Service name",
            "servicenameHint": "Example: webserver",
            "constraint": "Constraint"
          },
          "environmentVariables": "Environment Variables",
          "environmentVariablesDescription": "A list of environment variables",
          "environmentVariablesInputs": {
            "name": "Name",
            "nameHint": "Example: PROJECT_HOME",
            "value": "Value",
            "valueHint": "Example: /var/lib/project"
          },
          "customProperties": "Custom Properties",
          "customPropertiesDescription": "Custom Properties allow to add attributes to the containers that will be provisioned.",
          "healthContinueProvisionigOnError": "Ignore health check failures on provision",
          "healthContinueProvisionigOnErrorDescription": "If health check is configured, in addition to when the service is up and running, it will also be used on provisioning. The containers will not be considered provisioned until one successful health check passes. Check this option to be able to provision even without successful health check.",
          "healthMode": "Mode",
          "healthConfigNone": "None",
          "healthConfigTCP": "TCP connection",
          "healthConfigHTTP": "HTTP",
          "healthConfigCommand": "Command",
          "healthPath": "URL Path",
          "healthPathDescription": "URL path to the API used for health check",
          "healthPort": "Port",
          "healthPortHint": "Default: 80",
          "healthPortDescription": "Container port to be used",
          "healthTimeout": "Timeout (ms)",
          "healthTimeoutHint": "Default: 2000",
          "healthTimeoutDescription": "Timeout in ms for the health check operation",
          "healthyThreshold": "Healthy Threshold",
          "healthyThresholdHint": "Default: 3",
          "healthyThresholdDescription": "Threshold of health check success operations needed for the container to be considered healthy",
          "unhealthyThreshold": "Unhealthy Threshold",
          "unhealthyThresholdHint": "Default: 3",
          "unhealthyThresholdDescription": "Threshold of health check failure operations needed for the container to be considered unhealthy",
          "command": "Command",
          "commandDescription": "Command to be executed on the container. Exit status is used to determine container health.",
          "logConfigDriver": "Driver",
          "logConfigDriverDescription": "Logging driver for the container",
          "logConfigDriverTypes": {
            "none": "None",
            "bridge": "Bridge",
            "host": "Host"
          },
          "logConfigOptions": "Options",
          "logConfigOptionsDescription": "Supported options for each logging driver",
          "logConfigOptionsInputs" : {
            "name": "Name",
            "nameHint": "Example: max-size",
            "value": "Value",
            "valueHint": "Example: 10m"
           }
        }
      },
      "state": {
        "RUNNING": "RUNNING",
        "STOPPED": "STOPPED",
        "REBOOTING": "REBOOTING",
        "PAUSED": "PAUSED",
        "ERROR": "ERROR",
        "UNKNOWN": "UNKNOWN",
        "RETIRED": "RETIRED",
        "PROVISIONING": "PROVISIONING",
        "continuousStateSince": "__state__ for __duration__"
      },
      "actions": {
        "start": "Start",
        "reboot": "Reboot",
        "stop": "Stop",
        "remove": "Remove",
        "clone": "Clone",
        "details": "Details",
        "terminal": "Terminal",
        "manage": "Manage",
        "createTemplate": "Create Template",
        "openTemplate": "Open Template"
      }
    },
    "request": {
      "title": "Requests",
      "contextPanelTooltip": "Requests",
      "tabs": {
        "all": "All",
        "running": "Running",
        "failed": "Failed"
      },
      "actions": {
        "details": {
          "show": "Details",
          "hide": "Hide Details"
        },
        "open": "Open"
      }
    },
    "closure": {
      "title": "All Closures",
      "titleSearch": "Found Closures",
      "searchPlaceholder": "Search for closures",
      "placementZone": "Resource Pool",
      "resultStatus": "Result Status",
      "details": {
        "name": "Name",
        "description": "Description",
        "runtime" : "Runtime",
        "state": "State",
        "id": "ID",
        "inputs": "Inputs",
        "outputs": "Outputs",
        "errorMsg": "Error",
        "closureTitle": "Closure run info",
        "closureDescriptionTitle": "Closure description info",
        "descriptionId": "ID",
        "source": "Source",
        "sourceURL": "Source URL",
        "resources": "Resources",
        "placement": "Placement"
      },
      "state": {
        "CREATED": "CREATED",
        "STARTED": "STARTED",
        "FINISHED": "FINISHED",
        "FAILED": "FAILED",
        "CANCELLED": "CANCELLED"
      },
      "list" : {
        "name": "Closure",
        "closuresCountLabel": "Closures",
        "closureRunsLabel": "Closure runs",
        "memory": "Memory:",
        "timeout": "Timeout:"
      },
      "request": {
        "title": "Closure definition",
        "save": "Save",
        "run": "Run",
        "inputs": {
          "name": "Name",
          "description": "Description",
          "runtime": "Runtime",
          "source": "Source code",
          "sourceURL": "Source URL",
          "runtimeTypes": {
            "nodejs": "NodeJs 4",
            "python": "Python 3"
          },
          "logConfigOptionsInputs" : {
            "name": "Name",
            "nameHint": "Example: max-size",
            "value": "Value",
            "valueHint": "Example: 10m"
           },
           "closureInputs" : {
            "name": "Name",
            "nameHint": "Example: a",
            "value": "Value",
            "valueHint": "Example: 1"
           },
           "closureOutputs" : {
            "name": "Name",
            "nameHint": "Example: result"
           },
          "memoryLimit": "Memory limit (megabytes)",
          "timeout": "Timeout (seconds)",
          "entrypoint": "Entrypoint handler",
          "logConfigDriver": "Log driver",
          "logConfigOptions": "Log options",
          "sourceMode": "Mode",
          "sourceProvided": "Source provided",
          "sourceFromURL": "Source from URL",
          "inputs": "Inputs",
          "outputs": "Outputs",
          "dependencies": "Dependencies",
          "nameDescription": "Name of the closure. If entrypoint is not set the name will be used as function name to call.",
          "descriptionDescription": "Description of the closure",
          "sourceDescription": "Source code to execute",
          "sourceURLDescription": "Source code accessible via URL. The content could be the code itself or a zip file. If source URL is used the field source code won't be used.",
          "memoryLimitDescription": "Memory limit in megabytes. Max allowed value is 1536 MB.",
          "timeoutDescription": "Execution timeout in seconds. If execution exceeds the timeout the task execution is cancelled.",
          "entrypointDescription": "Main function to be called in the form: file_name.function_name",
          "logDriverDescription": "Logging driver for the closure task",
          "logConfigOptionsDescription": "Supported options for each logging driver",
          "dependenciesDescription": "Dependencies to install before running the code",
          "inputDescription": "Input to use when running the code. The input must be a primitive or valid JSON object.",
          "outputDescription": "Names of output parameters to use when populating the results."
        },
        "logs": {
          "title": "Logs"
        },
        "tabs": {
          "definition": "Definition",
          "code": "Code",
          "config": "Configuration"
        }
      },
      "monitoredTask": {
        "runStatus": "Run status",
        "runId": "Run ID:",
        "runState": "State:",
        "outputs": "Outputs"
      }
    },
    "help": {
        "link": "Help",
        "description": "Ensemble allows you to access relevant information for the context of the task that you are currently performing. It will refresh automatically with instructions as you continue your work. Use a second screen or split-screen to access the information in real time. You can use a mobile device, a TV, and any other screen whether it is connected to your computer or not. You can use Ensemble outside of the trusted network, while still receiving instantaneous updates.",
        "descriptionOpen": "To open Ensemble, click <strong>Open in new tab</strong> or scan the QR code with your mobile device."
      },
      "resources": {
        "selectMultiple": "Select Items",
        "message": {
          "selectShift": "Use shift to select multiple items"
        }
      }
    },
    "loginPanel": {
      "login": "Login",
      "logout": "Logout",
      "username": "Username",
      "password": "Password",
      "success": "Authentication successful",
      "failure": "Authentication error"
    },
    "dropdownSearchMenu": {
      "title": "Select from the __entity__ list",
      "searchPlaceholder": "Search for __entity__",
      "clear": "Clear Selection",
      "showingCount": "Showing __count__ out of __totalCount__",
      "noResults": "No items found"
    },
    "customProperties": {
      "name": "Name",
      "nameHint": "Example: speedchecker",
      "value": "Value",
      "valueHint": "Example: slow"
    },
    "yes": "Yes",
    "cancel": "Cancel",
    "delete": "Delete",
    "enable": "Enable",
    "enabled": "Enabled",
    "disable": "Disable",
    "disabled": "Disabled",
    "close": "Close",
    "edit": "Edit",
    "remove": "Remove",
    "add": "Add",
    "save": "Save",
    "back": "Back",
    "refresh": "Refresh",
    "clear": "Clear",
    "deleteAll": "Delete All",
    "pendingOperationCancel": "operation in",
    "openInNewTab": "Open in new tab",
    "unavailable": "N/A",
    "advanced": "Advanced",
    "noSelection": "No Selection",
    "buildNumber": "Build number",
    "errors": {
      "hostIp": "Value must be hostname or IP address.",
      "urlPath": "URL path is invalid.",
      "propertyNameRequired": "Property name is required.",
      "propertyContainerNameInvalid": "Invalid container name, only [a-zA-Z0-9][a-zA-Z0-9_.-] are allowed.",
      "propertyNamesNotUnique": "Property names must be unique.",
      "nonNegativeNumber": "Value must be a non-negative integer less than 2147483648.",
      "positiveNumber": "Value must be a positive integer less than 2147483648.",
      "nonNegativeNumberAndMinusOne": "Value must be an integer between -1 and 2147483647.",
      "portNumber": "Invalid port number. A valid port number ranges from 0 to 65535.",
      "containerMemory": "Memory must be 0 (no limit) or at least 4194304 bytes (4MB).",
      "required": "Value is required.",
      "requiredAll": "All fields are required.",
      "serviceNameRequired": "Service name is required.",
      "networkRequired": "Network is required.",
      "itemNotFound": "Item was not found.",
      "networkExists": "Network already exists in template.",
      "volumeDestinationRequired": "Volume destination is required.",
      "invalidInputValue": "Invalid input value",
      "invalidPath": "Value must be an absolute path.",
      "invalidPathOrName": "Value must be an absolute path or a valid volume name.",
      "containersConnected": "There are connected containers.",
      "managedByCatalog": "Managed by catalog"
    },
    "infoMessages": {
      "created": "Created Successfully!",
      "updated": "Updated Successfully!"
    },
    "occurrence": {
      "all": "Match all",
      "any": "Match any"
    },
    "state": {
      "ON": "ON",
      "OFF": "OFF",
      "SUSPEND": "DISABLED",
      "UNKNOWN": "UNKNOWN",
      "stateSinceMessage": "since __date__"
    }
}
